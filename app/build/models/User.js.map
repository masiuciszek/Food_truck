{"version":3,"file":"User.js","sourceRoot":"","sources":["../../src/models/User.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,qDAA4C;AAE5C,wDAA8B;AAC9B,kCAAkC;AAElC,MAAM,UAAU,GAAG,IAAI,iBAAM,CAAO;IAClC,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,8BAA8B,EAAE,IAAI,CAAC;KACjD;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,6BAA6B,EAAE,IAAI,CAAC;KAChD;IACD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,0BAA0B,EAAE,IAAI,CAAC;QAC5C,MAAM,EAAE,IAAI;KACb;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,CAAC,6BAA6B,EAAE,IAAI,CAAC;QAC/C,SAAS,EAAE,CAAC;KACb;IACD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;QACxB,OAAO,EAAE,MAAM;KAChB;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC;QACjC,OAAO,EAAE,MAAM;KAChB;IACD,GAAG,EAAE;QACH,IAAI,EAAE,MAAM;QACZ,GAAG,EAAE,EAAE;QACP,QAAQ,EAAE,CAAC,wBAAwB,EAAE,IAAI,CAAC;KAC3C;IACD,MAAM,EAAE;QACN;YACE,KAAK,EAAE;gBACL,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;aACf;SACF;KACF;IAED,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,IAAI,CAAC,GAAG;KAClB;CACF,CAAC,CAAC;AAEH,gDAAgD;AAEhD,kCAAkC;AAClC,UAAU,CAAC,GAAG,CAAO,MAAM,EAAE,UAAgB,IAAkB;;QAC7D,MAAM,IAAI,GAAG,IAAI,CAAC;QAElB,MAAM,IAAI,GAAG,MAAM,kBAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;YAC/B,IAAI,CAAC,QAAQ,GAAG,MAAM,kBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SACxD;QACD,IAAI,EAAE,CAAC;IACT,CAAC;CAAA,CAAC,CAAC;AAEH,MAAM,SAAS,GAAG,kBAAQ,CAAC,KAAK,CAAO,MAAM,EAAE,UAAU,CAAC,CAAC;AAElD,8BAAS","sourcesContent":["import { NextFunction } from 'express';\nimport mongoose, { Schema } from 'mongoose';\nimport { User } from './documents';\nimport bcrypt from 'bcryptjs';\n// import jwt from 'jsonwebtoken';\n\nconst UserSchema = new Schema<User>({\n  firstName: {\n    type: String,\n    required: ['pleas fill in your firstName', true],\n  },\n  lastName: {\n    type: String,\n    required: ['pleas fill in your lastName', true],\n  },\n  email: {\n    type: String,\n    required: ['pleas fill in your email', true],\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: ['pleas fill in your password', true],\n    minlength: 5,\n  },\n  gender: {\n    type: String,\n    enum: ['MALE', 'FEMALE'],\n    default: 'MALE',\n  },\n  role: {\n    type: String,\n    enum: ['USER', 'ADMIN', 'MASTER'],\n    default: 'USER',\n  },\n  age: {\n    type: Number,\n    min: 18,\n    required: ['pleas fill in your age', true],\n  },\n  tokens: [\n    {\n      token: {\n        type: String,\n        required: true,\n      },\n    },\n  ],\n\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\n// Middleware that is binned tou our user schema\n\n// Hash password before registered\nUserSchema.pre<User>('save', async function (next: NextFunction) {\n  const user = this;\n\n  const salt = await bcrypt.genSalt(8);\n  if (user.isModified('password')) {\n    user.password = await bcrypt.hash(user.password, salt);\n  }\n  next();\n});\n\nconst userModel = mongoose.model<User>('User', UserSchema);\n\nexport { userModel };\n"]}